'use strict';

const console = window.console;

// IO proxies
const ioutils = require('ioutils');
const json_io = ioutils.json_io;
const fs_io = ioutils.fs_io;
const http_io = ioutils.http_io;

// Utility methods
const utils = require('utils');
const html2document = utils.html2document;
const html2text = utils.html2text;
const parseTime = utils.parseTime;
const parseDate = utils.parseDate;

// Extraction methods: go through the HTML soup and extract data as-is

/**
 *	Extract the section information
 *
 *	Section information is encoded as Javascript object in a <script> tag
 */
let getSectionDataObj = function(doc) {
	let scripts = doc.querySelectorAll('script');
	for (let i = 0; i < scripts.length; ++i) {
		let lines = scripts[i].text.split('\n');
		for (let j = 0; j < lines.length; j++) {
			var matches = /sectionDataObj(\s)*=(\s)*(.*)/.exec(lines[j]);
			if (matches && matches[3]) {
				return eval(matches[3]);
			}
		}
	}
	throw 'Cannot find data object';
}

/**
 *	Get detailed descriptions from the course info section
 */
let getCourseInfoDetails = function(div) {
	let blocks = div.children;
	let info = {};
	var matches = /^Credit:(.*)/.exec(blocks[0].innerText);
	if (!matches)
		throw 'Cannot find credit info';
	info.credit = matches[1].trim();
	info.description = blocks[1].innerHTML.trim();
	info.requirements = [];
	for (let i = 2; i < blocks.length; i++) {
		info.requirements.push(blocks[i].innerHTML.trim());
	}
	return info;
}

/**
 *	Get course info section (text block) from the html
 */
let getCourseInfo = function(doc) {
	var info = {};
	let infoblock = doc.querySelector('#app-course-info');
	if (!infoblock || !infoblock.children || !infoblock.children.length)
		throw 'Cannot find app-course-info block';
	let blocks = infoblock.children;
	info.code = doc.querySelector('h1').innerText;
	info.title = blocks[0].querySelector('span').innerText.trim();
	for (var i = 1; i < blocks.length; ++i) {
		if (blocks[i].innerText.trim().substr(0,7) == 'Credit:') {
			Object.assign(info, getCourseInfoDetails(blocks[i]));
			++i;
			break;
		}
	}
	info.additional = [];
	// The remaining blocks are added as additional info
	for (; i < blocks.length; ++i) {
		info.additional.push(blocks[i].innerHTML.trim());
	}
	return info;
}


// Parsing methods: take the extracted data and convert into API-friendly objects


/**
 *	Read from the course info text blob
 */
let parseInfo = function(info) {
	let courseobj = {};

	// Parse code
	courseobj.code = info.code;
	var matches = /^([A-Z]{2,}) (\d{3,})/.exec(info.code);
	if (!matches)
		throw 'Cannot parse course code';
	courseobj.dept = matches[1].toUpperCase();
	courseobj.number = matches[2];

	// Parse requirements
	courseobj.requirements = {
		raw: info.requirements,
		depend: [],
		exclude: [],
		gened: [],
		other: []
	};

	info.requirements.forEach((line) => {
		// console.info(line);
		var doc = html2document(line), text = doc.textContent;
		doc.querySelector('strong.app-text-engage');
		if (/^This course satisfies the General Education Criteria in/.exec(text)) {
			text = text.replace(/&nbsp;/g, " ");
			text.split("\n").forEach((req_line) => {
				var matches = /UIUC: (.*).course/.exec(req_line);
				if (matches) {
					// console.info(`Found req: ${matches[1]}`);
					courseobj.requirements.gened.push(matches[1]);
				}
			});
		}
	});

	// Credit
	matches = false;
	let credit = info.credit.toLowerCase();
	credit = credit.replace(/(^| )\./g,'$1哔0.').replace(/哔/g, '');
	if (matches = /^((\d+)(\.\d+){0,1}) hour/.exec(credit)) {
		courseobj.credit = [parseInt(matches[1])];
	} else if (matches = /^((\d+)(\.\d+){0,1}) to ((\d+)(\.\d+){0,1}) hour/.exec(credit)) {
		courseobj.credit = {
			range: [parseInt(matches[1]), parseInt(matches[4])]
		};
	} else if (matches = /^((\d+)(\.\d+){0,1}) or ((\d+)(\.\d+){0,1}) hour/.exec(credit)) {
		courseobj.credit = [parseInt(matches[1]), parseInt(matches[4])];
	} else {
		console.warn(`Unparsable credit: ${credit}`);
		courseobj.credit = [credit];
	}

	// Copy
	courseobj.title = info.title;
	courseobj.description = info.description;
	courseobj.additional = info.additional;

	return courseobj;
}

/**
 *	Read from the section info object
 */
let parseSectionObj = function(sections, course) {
	let secsobj = {};
	sections.forEach((section) => {
		var secobj = {};

		// Status
		let status = html2document(section.status);
		secobj.status = {
			code: parseInt(status.querySelector('span.hide').innerText),
			msg: section.availability
		};

		// Credit
		secobj.credit = course.credit;
		if (section.credit) {
			var matches = /^((\d+)(\.\d+){0,1}) hour/.exec(section.credit);
			if (matches) {
				secobj.credit = [parseInt(matches[1])];
			} else {
				console.warn(`Cannot parse section credit: ${section.credit}`);
			}
		}

		// Meetings
		secobj.meetings = [];
		let meet_day = html2document(section.day).querySelectorAll('div');
		let meet_instructor = html2document(section.instructor).querySelectorAll('div');
		let meet_location = html2document(section.location).querySelectorAll('div');
		let meet_section = html2document(section.section).querySelectorAll('div');
		let meet_time = html2document(section.time).querySelectorAll('div');
		let meet_type = html2document(section.type).querySelectorAll('div');
		secobj.section = meet_section[0].innerText.trim();
		secobj.type = meet_type[0].innerText.trim();
		for (let i=0; i<meet_section.length; ++i) {
			let day = meet_day[i].innerText.trim().split(''); // TODO: parse day of week

			let time = /(.*) - (.*)/.exec(meet_time[i].innerText);
			if (time) {
				time = [parseTime(time[1]), parseTime(time[2])];
			} else if (meet_time[i].innerText == 'ARRANGED') {
				time = [false, false];
			} else {
				console.warn(`Cannot parse time for CRN ${section.crn}: ${meet_time[i].innerText}`);
			}

			let location = meet_location[i].innerText.trim(); // TODO: parse location

			var meet_obj = {
				day: day,
				time: time,
				instructor: meet_instructor[i].innerText.trim().split('\n'),
				location: location,
				section: meet_section[i].innerText.trim(),
				type: meet_type[i].innerText.trim()
			};
			if (meet_obj.section != secobj.section) {
				console.warn(`Section inconsistent for CRN ${section.crn}: ${meet_obj.section} vs ${secobj.section}`);
			}
			if (meet_obj.type != secobj.type) {
				secobj.type = "Composite";
				// console.warn(`Type inconsistent for CRN ${section.crn}: ${meet_obj.type} vs ${secobj.type}`);

			}
			secobj.meetings.push(meet_obj);
		}

		// Date ranges
		var matches = /Meets (.*) - (.*)\./.exec(section.sectionDateRange);
		if (matches) {
			secobj.sectionDateRange = [parseDate(matches[1]), parseDate(matches[2])];
		} else {
			secobj.sectionDateRange = [];
			if (section.sectionDateRange)
				console.warn(`Failed to parse date range for CRN ${section.crn}: ${section.sectionDateRange}`);
		}
		matches = /Meets (.*) - (.*)\./.exec(section.courseDateRange);
		if (matches) {
			secobj.courseDateRange = [parseDate(matches[1]), parseDate(matches[2])];
		} else {
			secobj.courseDateRange = [];
			if (section.courseDateRange)
				console.warn(`Failed to parse date range for CRN ${section.crn}: ${section.courseDateRange}`);
		}

		// Restrictions
		secobj.restriction = html2text(section.restricted); // TODO parse restrictions

		// Optional copy
		secobj.title = section.sectionTitle?section.sectionTitle:"";
		secobj.info = section.info?section.info:"";
		secobj.description = section.sectionDescription?section.sectionDescription:"";
		secobj.course_desc = section.courseDescription?section.courseDescription:"";
		secobj.fee = section.sectionFee?section.sectionFee:"";
		secobj.special_approval = section.specialApproval?section.specialApproval:"";

		// Rare properties:
		secobj.approvalCode = section.approvalCode?section.approvalCode:"";
		secobj.corequest = section.corequest?section.corequest:"";
		secobj.courseDegreeNotes = section.courseDegreeNotes?section.courseDegreeNotes:"";
		secobj.sectionDegreeNotes = section.sectionDegreeNotes?section.sectionDegreeNotes:"";
		secobj.approvalCode = section.approvalCode?section.approvalCode:"";

		if (section.corequest) {console.info("section.corequest = "+section.corequest+" at "+course.code); }
		if (section.courseDegreeNotes) {console.info("section.courseDegreeNotes = "+section.courseDegreeNotes+" at "+course.code); }
		if (section.sectionDegreeNotes) {console.info("section.sectionDegreeNotes = "+section.sectionDegreeNotes+" at "+course.code); }
		if (section.approvalCode) {console.info("section.approvalCode = "+section.approvalCode+" at "+course.code); }

		// Copy
		secobj.crn = parseInt(section.crn);
		secobj.term = section.partOfTerm;

		if (!secsobj[secobj.type])
			secsobj[secobj.type] = [];
		secsobj[secobj.type].push(secobj);
	});
	return secsobj;
}

// Module: Course Object

// Constructor
var Course = function(jsonObj) {
	Object.assign(this, jsonObj);

	this.stringify = function() {
		return JSON.stringify(this);
	}

	this.getCredit = function() {
		return Course.getCredit(this.credit);
	}

	return this;
}

Course.getCredit = function(obj) {
	if (!obj) {
		return "N/A"
	}
	if (obj.range) {
		var credit = obj.range.sort();
		return credit[0] + " - " + utils.quantity(credit[1], 'credit');
	} else {
		var credit = obj.slice();
		credit.sort();
		var last = credit.pop();
		if (credit.length > 0) {
			return credit.join(", ") + " or " + utils.quantity(last, 'credit');
		} else {
			return utils.quantity(last, 'credit');
		}
	}
}


Course.fromHTML = function(htmlData) {
	var course = {};
	let doc = html2document(htmlData);

	let course_info = getCourseInfo(doc);
	Object.assign(course, parseInfo(course_info));

	let sectionDataObj = getSectionDataObj(doc);
	course.sections = parseSectionObj(sectionDataObj, course);

	return new Course(course);
}

// From URL: use promise
Course.fromURL = function(url, io) {
	if (!io) {
		var io = new http_io(url);
		var get_promise = io.getItem();
	} else {
		var get_promise = io.getItem(url);
	}
	return new Promise((resolve, reject) => {
		get_promise.then((data) => {
			try {
				var course = Course.fromHTML(data)
				resolve(course);
			} catch(e) {
				reject(e);
			}
		}, (err) => {
			reject(err);
		});
	});
}

Course.STATUS = ['', 'Open', 'Restricted', 'Closed'];

module.exports = Course;
window.Course = Course;
