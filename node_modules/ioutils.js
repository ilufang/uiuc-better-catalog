/**
 *	IO wrappers
 *
 *	Provides a read/write interface like WebStorage API for file, http and https
 */

"use strict";

const fs = require('fs');
const http = require('http');
const https = require('https');

var json_io = function(json) {
	// Warning: changes saved to this IO object is not permanent!!!
	this.data = json;
	this.getItem = function(filename) {
		return this.data[filename];
	};
	this.setItem = function(filename, data) {
		this.data[filename] = data;
	}
	return this;
}

var fs_io = function(dirname, dirbase, async) {
	if (!dirbase){
		dirbase = __dirname+'/';
	}

	if (dirname.substr(-1,1) != '/') {
		dirname += '/';
	}

	this.getItem = function(filename) {
		if (aysnc) {
			return new Promise((resolve, reject) => {
				// fs IO for file urls created from HTTP IO might access html documents
				// Therefore the auto .json extension is not applied.
				// Additionally, we also simulate DirectoryIndex behavior (/ => index.html)
				let uri = `${dirbase}${dirname}${filename}`;
				if (!filename) {
					uri = uri.substr(0, uri.length-1);
				}
				if (!fs.statSync(uri).isFile()) {
					if (uri.substr(-1,1) != '/') {
						uri += '/';
					}
					uri += 'index.html';
					if (!fs.statSync(uri).isFile()) {
						reject(404);
					}
				}
				fs.readFile(uri,(err, data) => {
					if (err) {
						reject(err);
					} else {
						resolve(data);
					}
				});
			});
		} else {
			return fs.readFileSync(`${dirbase}${dirname}${filename}.json`);
		}
	};
	this.setItem = function(filename, data) {
		if (async) {
			console.warn('Async write called on file IO. This should not happen!');
			console.warn('Async file IO should only be created from http IO on file URLs!');
		} else {
			return fs.writeFileSync(`${dirbase}${dirname}${filename}.json`, data);
		}
	};
	return this;
};

var http_io = function(baseURL) {
	// Process URL
	if (baseURL.substr(0,7) == 'http://') {
		this.driver = http;
	} else if (baseURL.substr(0,8) == 'https://') {
		this.driver = https;
	} else if (baseURL.substr(0,7) == 'file://') {
		return new fs_io(baseURL.substr(7),'',true);
	} else {
		baseURL = 'http://'+baseURL;
		this.driver = http;
		console.warn(`baseURL (${baseURL}) does not contain a protocol! Assuming it is http...`);
	}

	if (baseURL.substr(-1,1)!='/') {
		baseURL += '/';
	}

	this.getItem = function(filename) {
		var uri = baseURL;
		if (!filename) {
			uri = uri.substr(0,uri.length-1);
		} else {
			if (filename.substr(0,1) == '/')
				filename = filename.substr(1);
			uri += filename;
		}
		return new Promise((resolve, reject) => {
			this.driver.get(uri, (res) => {
				res.setEncoding('utf8');
				let data = '';
				res.on('data', (chunk) => {
					data += chunk;
				});
				res.on('end', () => {
					if (res.statusCode!=200) {
						reject(res.statusCode);
					} else {
						resolve(data);
					}
				});
			}).on('error', (e) => {
				reject(e);
			});
		});
	};
	this.setItem = function() {
		console.warn("Called setItem on HTTP stream. This should not happen!");
	};
	return this;
}

module.exports = {json_io, fs_io, http_io};
