"use strict";

var ioutils = require("ioutils");
var Catalog = require("catalog");
var catalog = Catalog.inst;
var EventEmitter = require('events');


var sanitizeCourse = function(course) {
	if (!course) {
		throw "Course is required!";
	}
	course = Catalog.parseCourseCode(course);
	course = course.dept + course.number;
	return course;
}

var Bookmark = function(data) { // extends EventEmitter
	EventEmitter.call(this);

	/*
	 *	Data structure:
	 *
	 *	Favorites are indexed by courses+types
	 *	For each section, the value is an array of selected CRNs
	 */
	this.data = data;
};

Bookmark.prototype = Object.create(EventEmitter.prototype);
Bookmark.prototype.constructor = Bookmark;

var add = function(course, section, crn) {
	course = sanitizeCourse(course);
	var courseobj = Catalog.inst.getCourse(course);

	if (!courseobj) {
		throw `Course ${course} does not exist!`;
	}

	if (!this.data[course]) {
		this.data[course] = {};
	}
	if (!section) {
		// Add all sections
		for (var type in courseobj.sections) {
			this.add(course, type);
		}
		return;
	}
	// Add CRNs in the section
	var secobj = courseobj.sections[section];
	if (!secobj) {
		console.warn("Call bookmark to an non-existent section: "+course+section);
		return false;
	}
	if (!this.data[course][section] || !crn) {
		// Initialize to empty array if not exists
		// Or force to empty array if adding every CRN
		this.data[course][section] = [];
	}
	var secbm = this.data[course][section];
	if (!crn) {
		// Add everything!
		for (var i=0; i<secobj.length; ++i) {
			secbm.push(secobj[i].crn);
		}
	} else {
		// Otherwise, search for CRNs existing in the bookmark
		// and add to bookmark if not found
		for (var i=0; i<secbm.length; ++i) {
			if (secbm[i] == crn)
				return;
		}
		secbm.push(crn);
	}
};

var remove = function(course, section, crn) {
	course = sanitizeCourse(course);

	if (!this.data[course])
		return false;
	if (!section) {
		// Remove the entire course
		delete this.data[course];
		return true;
	}

	if (!this.data[course][section])
		return false;
	if (!crn) {
		delete this.data[course][section];
		if (Object.keys(this.data[course]).length == 0) {
			delete this.data[course];
		}
		return;
	}

	// Note: this.data[course][section] is an array of CRNs,
	// not a object (dictionary/associative array) indexed by CRN!

	var idx = this.data[course][section].indexOf(crn);
	if (idx != -1) {
		this.data[course][section].splice(idx, 1);
		if (this.data[course][section].length == 0) {
			delete this.data[course][section];
			if (Object.keys(this.data[course]).length == 0) {
				delete this.data[course];
			}
		}
	}
};

Bookmark.prototype.add = function(course, section, crn) {
	(add.bind(this))(course, section, crn);
	this.save();
	this.emit('bookmark-changed');
};

Bookmark.prototype.remove = function(course, section, crn) {
	(remove.bind(this))(course, section, crn);
	this.save();
	this.emit('bookmark-changed');
}

Bookmark.prototype.get = function(course, section, crn) {
	course = sanitizeCourse(course);

	if (!this.data[course]) {
		return "none";
	}

	var courseobj = Catalog.inst.getCourse(course);
	if (!section) {
		// Decide whether the entire course is selected
		for (var type in courseobj.sections) {
			if (this.get(course, type) != "all") {
				return "partial";
			}
		}
		return "all";
	}

	var sectionbm = this.data[course][section];
	if(!sectionbm) {
		return "none";
	}

	if (crn) {
		// Just one CRN
		if (sectionbm.indexOf(crn)==-1)
			return "none";
		else
			return "all";
	}

	// Iterate through all CRNs
	var sectionobj = courseobj.sections[section];
	var status = '';
	for (var i=0; i<sectionobj.length; ++i) {
		if (sectionbm.indexOf(sectionobj[i].crn) == -1) {
			if (status == '')
				status = 'none';
			if (status != 'none') {
				return 'partial';
			}
		} else {
			if (status == '')
				status = 'all';
			if (status != 'all') {
				return 'partial';
			}
		}
	}
	return status;
};

Bookmark.prototype.save = function(storage) {
	if (!storage) {
		if (this.storage) {
			storage = this.storage;
		} else {
			console.warn("No storage to save to!");
			return false;
		}
	}
	storage.setItem("bookmark", JSON.stringify(this.data));
}

Bookmark.fromStorage = function(storage) {
	var bookmark = new Bookmark(JSON.parse(storage.getItem("bookmark")));
	bookmark.storage = storage;
	return bookmark;
}

module.exports = Bookmark;
